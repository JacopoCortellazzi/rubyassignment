{\rtf1\ansi\deff1{\fonttbl{\f1\fnil \fcharset0 \cpg1252 Courier;}{\f2\fnil \fcharset0 \cpg1252 Courier;}}{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;}\plain <FCFORMSHEADER>\par <?xml version="1.0"?>\par <!DOCTYPE FIRSTCLASS SYSTEM "firstclass.dtd">\par <firstclass>\par \tab <fcobject objtype="oConfItem" formid="141" objname="Beatrice &#197;kerblom">\par \tab \tab <subject index="0" >Assignment One</subject>\par \tab \tab <field id="63" index="0" type="text">DYPL Dokumentation</field>\par \tab \tab <tonames index="0" >DYPL Dokumentation</tonames>\par \tab \tab <attachment index="1" >Attachments\\assignment.jar</attachment>\par \tab </fcobject>\par </firstclass>\par </FCFORMSHEADER>\par \pard\itap0\f1\b\i0\ul0\strike0\fcqt0\nosupersub\fs40\cf1\cb2\fi0\ri0\li0\ql\sb0\sl0 Assignment One -- Python\par \fs20 \par \b0 The assignment is to implement a simple domain specific language to control a Java program for \f1 {\field\fldedit{\*\fldinst {HYPERLINK "http://en.wikipedia.org/wiki/Turtle_graphics#Turtle_programming "}}{\fldrslt\f1\cf3 Turtle Graphics}}\pard\itap0\f1\b0\i0\ul0\strike0\fcqt0\nosupersub\fs20\cf1\cb2\fi0\ri0\li0\ql\sb0\sl0 . Parsing and translation and execution of the DSL should be implemented in Jython. The files that you need \par (assigment.jar) can be found as an attachment to this \par message. \par \par \b\fs28 DSL\par \fs20 \par \b0 The language to control the painting is an adoptation of the \par idea of turtle graphics. The language has 8 statements: \par \par   pen_down - turn pen on (movement draws on canvas)\par \par   pen_up - turn pen off (movement does not draw on canvas)\par \par   move_forward - move one step forward\par \par   move_backward - move one step backward\par \par   move(STEPS, ANGLE) - move STEPS steps in ANGLE direction, \par                        where STEPS and ANGLE are integer \par                        literals (1, 2, ...) or loop \par                        variables (see below)\par \par   turn_cw(ANGLE) - turn clockwise, where ANGLE is an integer \par                    literal or a loop variable (see below)\par \par   turn_ccw(ANGLE) - turn counter clockwise, where ANGLE is \par                     an integer literal or loop variable (see \par                     below)\par \par   put(XPOS, YPOS, ANGLE) - puts the pen on XPOS, YPOS \par                            pointing in ANGLE direction\par \par   for X=0 to 10 do - repeat STATEMENTS 10 times (STATEMENTS \par   STATEMENTS end     may not contain another loop). X should \par                      be visible to STATEMENTS (but not \par                      outside the loop)\par \par ANGLE is the number of degrees to turn clockwise from the current direction. STEPS is number of pixels.\par \par All arguments passed to statements taking arguments must be integer literals, loop variables or a combination of the two separated by one of the following binary arithmetic operations: +, -, * \par \par Ex: \par \par   put(100, 100, 90) - place on 100x100 facing east\par \par   move(10, 45) - move 10 steps in 45 degree angle of facing\par \par   for X=0 to 4 do    - draws a square with the side 50 pixels\par      move(50, X*90)\par   end\par \par \b\fs28 The Task\b0\fs20 \par \par The program consists of a Java application with a canvas and \par a textarea for turtle code. Your job is to write a Jython \par application that takes turtle code from the Java \par application, parses it with regular expressions and calls \par setPixel(x,y) in the Java application to draw the \par corresponding image. \par \par \b The turtle remembers its current angle.\b0 \par \par For example the following turtle code program draws a \par rectangle with the sides 50 and 100 pixels:\par \par   put(150, 150, 0)\par   move(50, 90)\par   move(100, 90)\par   move(50, 90)\par   move(100, 90)\par \par The following turtle code program draws a tilted square with \par the side 50 pixels:\par \par   put(100, 100, 45)\par   for X=0 to 4 do\par     move(50, 90)\par   end\par \par For this task there is a preexisting bridge class called \par JythonTranslater.Jtrans, that accepts events from the Java \par program. You should subclass this class and override its \par methods. \par \par \b\fs28 Restrictions\b0\fs20 \par \par You may only interact with the Java program by calling setPixel(x, y) to control the painting and getCode() to get the code entered in to the turtle code textarea. These methods are both defined in the DYPL Java class.\par \par You may not change the Java code in any way.\par \par All code to implement this assignment should be Python code. \par \par \b\fs28 Hints\b0\fs20 \par \par Your Jython class(es) may be compiled to byte code with the \par command jythonc. If you use the -w flag with jythonc you can \par get it to put the resulting class files in your current \par directory (default is ./jpywork):\par \par   jythonc -w . MyJythonFile.py\par \par When Jython classes are compiled with jythonc they are \par turned into regular Java classes and hence the module and \par class concepts get a bit cluttered. One could say that java \par packages are python modules. But also if you examine the \par class files produced by jythonc you'll see that the jython \par classes are inner classes in Java.\par \par I previously said that you should name your class and file \par differently. This is not true. It is true for the general \par case, but the DYPL program assumes that the file and class \par have the same name. So, in the general case you should name \par them differently, but not for this assignment.\par \par In this example we have a file called MyJythonFile.py \par containing a class called MyClass and we have compiled with \par jythonc:\par \par   from MyJythonFile import MyClass\par   class MyOtherClass(MyClass):\par       pass\par \par If you keep all class files in the same directory you should \par have less classpath problems.\par \par Don't forget to include jython.jar in your classpath\par \par To get you started you get the pen_up and pen_down [regular \par expressions]:\par \par   "\\s*pen_down\\n"\par   "\\s*pen_up\\n"\par \par A good idea might be to write a Python program that just \par parses a turtle code file in order to eliminate as many \par sources of error as possible for jour first attempts to \par write Python code. Jython is only required for the actual \par canvas drawing when the Java application must work together \par with the Python application. \par \par \b\fs28 Running the DYPL program\b0\fs20 \par \par Unjar the assignment.jar file:\par \par   jar -xf assignment.jar\par \par To run the DYPL program:\par \par   java -classpath /path/to/jython/home/jython.jar:. DYPL\par \par To run the DYPL program with your JythonTranslater subclass:\par \par   java -classpath /path/to/jython/home/jython.jar:. DYPL \par   NameofSubclass\par \par (Note that classpath separators in *nix are : but ; in \par DOS/windows. Thus, replace : by ; above if not running *nix) \par \par \b\fs28 Resources\b0\fs20 \par \par The Jython Home Page: http://www.jython.org\par \par The Python Home page: http://www.python.org\par \par Regular Expressions: http://www.amk.ca/python/howto/regex\par \par General knowledge: http://google.com \par \par }